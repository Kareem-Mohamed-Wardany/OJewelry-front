import React, { useState, useEffect } from 'react';
import axios from 'axios';

const InfiniteScroll = () => {
  const [items, setItems] = useState([]); // Items to display
  const [page, setPage] = useState(1); // Current page
  const [hasMore, setHasMore] = useState(true); // Whether more data is available
  const [loading, setLoading] = useState(false); // Loading state

  const fetchItems = async () => {
    if (loading) return; // Prevent duplicate calls
    setLoading(true);

    try {
      const res = await axios.get(`/api/items?page=${page}&limit=10`);
      setItems((prev) => [...prev, ...res.data.data]); // Append new data
      setHasMore(page < res.data.pagination.totalPages); // Check if more pages are available
      setPage((prev) => prev + 1); // Increment page for next call
    } catch (error) {
      console.error('Error fetching items:', error);
    } finally {
      setLoading(false);
    }
  };

  // Fetch the first page of data on mount
  useEffect(() => {
    fetchItems();
  }, []);

  // Infinite scrolling logic
  const handleScroll = () => {
    if (
      window.innerHeight + document.documentElement.scrollTop >=
        document.documentElement.offsetHeight - 100 &&
      hasMore &&
      !loading
    ) {
      fetchItems();
    }
  };

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [hasMore, loading]);

  return (
    <div>
      <h1>Infinite Scroll Example</h1>
      <ul>
        {items.map((item, index) => (
          <li key={index}>{item.name}</li> // Adjust based on your data structure
        ))}
      </ul>
      {loading && <p>Loading...</p>}
      {!hasMore && <p>No more items to display</p>}
    </div>
  );
};

export default InfiniteScroll;
